<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on mkbaltz</title>
    <link>https://www.mkbaltz.com/tags/programming/</link>
    <description>Recent content in programming on mkbaltz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Apr 2022 06:29:02 +0800</lastBuildDate><atom:link href="https://www.mkbaltz.com/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C How to Read the Entire Content of a Text File</title>
      <link>https://www.mkbaltz.com/posts/c-read-entire-text/</link>
      <pubDate>Fri, 29 Apr 2022 06:29:02 +0800</pubDate>
      
      <guid>https://www.mkbaltz.com/posts/c-read-entire-text/</guid>
      <description>Most resources I found for reading files shows how to read a file line by line then display the output, but there are cases where you want to read the entire content of the file and store its contents in a variable for later use.
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; char* read_file(const char* path) {  // open the file  FILE* f = fopen(path, &amp;#34;rb&amp;#34;);   // determine the length of the file  fseek(f, 0, SEEK_END);  long length = ftell(f);  fseek(f, 0, SEEK_SET);   // allocate buffer to store the contents of the file  // size of the buffer should be the file length + 1  // because we need to add a null terminator at the end  char* buffer = malloc((sizeof(char) * length) + 1);   // read the file to our buffer  fread(buffer, sizeof(char), length, f);   // at this point file can be closed  fclose(f);   // add null terminator  buffer[length] = &amp;#39;\0&amp;#39;;   return buffer; }  int main(int argc, char* args[]) {  // read the file and store its contents to str variable  char* str = read_file(&amp;#34;path_to_file.</description>
    </item>
    
    <item>
      <title>C Encapsulation and Opaque Types</title>
      <link>https://www.mkbaltz.com/posts/c-encapsulation/</link>
      <pubDate>Thu, 28 Apr 2022 13:52:37 +0800</pubDate>
      
      <guid>https://www.mkbaltz.com/posts/c-encapsulation/</guid>
      <description>Encapsulation in most languages is usually done by having a class with a private variable with public methods to access and modify its value.
An Example Here&amp;rsquo;s an example in Java for illustrative purposes
// simple example in Java public class Person {  // constructor  public Person() {}   // private variable accessible only inside the class  private int age;   // public methods to interact with its instance  public int getAge() {  return this.</description>
    </item>
    
    <item>
      <title>How to Recover Password from a Saved Connection in DBeaver</title>
      <link>https://www.mkbaltz.com/posts/how-to-recover-dbeaver-password/</link>
      <pubDate>Wed, 27 Apr 2022 16:04:12 +0800</pubDate>
      
      <guid>https://www.mkbaltz.com/posts/how-to-recover-dbeaver-password/</guid>
      <description>Requirements  OpenSSL is installed on your system OpenSSL is registered to PATH  TLDR; cd credentials_config_json_directory # change this to the directory where credentials-config.json is located on your system openssl aes-128-cbc -d -K babb4a9f774ab853c96c2d653dfe544a -iv 00000000000000000000000000000000 -in &amp;#34;credentials-config.json&amp;#34; Export DBeaver Project DBeaver stores an encrypted credentials of your saved connections in the a file named &amp;ldquo;credentials-config.json&amp;rdquo;.
To get this file we need to:  In DBeaver, Go to File -&amp;gt; Export -&amp;gt; DBeaver -&amp;gt; Project Select an output directory Press Finish Go to output directory Rename output file and change extension to .</description>
    </item>
    
  </channel>
</rss>
