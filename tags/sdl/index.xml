<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>sdl on mkbaltz</title>
    <link>https://www.mkbaltz.com/tags/sdl/</link>
    <description>Recent content in sdl on mkbaltz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 Jun 2022 00:00:00 +0800</lastBuildDate><atom:link href="https://www.mkbaltz.com/tags/sdl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SDL2 Tutorial in C [03] - Breakout</title>
      <link>https://www.mkbaltz.com/posts/c-sdl-breakout/</link>
      <pubDate>Mon, 06 Jun 2022 00:00:00 +0800</pubDate>
      
      <guid>https://www.mkbaltz.com/posts/c-sdl-breakout/</guid>
      <description>In this post we will use what we have learned previously to create a Breakout clone.
Link to previous posts in the series:
  SDL2 Tutorial in C [01] - Creating a Window, Renderer, and Setting an FPS Cap
  SDL2 Tutorial in C [02] - Rendering Shapes
  We will also learn how to display text and load fonts and for that we need to install the SDL2_ttf library.</description>
    </item>
    
    <item>
      <title>SDL2 Tutorial in C [02] - Rendering Shapes</title>
      <link>https://www.mkbaltz.com/posts/c-sdl-rendering-shapes/</link>
      <pubDate>Mon, 30 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://www.mkbaltz.com/posts/c-sdl-rendering-shapes/</guid>
      <description>In this post we will look at the functions for drawing shapes provided by SDL2.
TL;DR Skip to the example program.
Overview Drawing shapes in SDL2 involves the following steps:
 Create a renderer Set the drawing color for clearing the screen Clear the screen Set the drawing color for drawing functions Call one of the drawing functions Update the screen  Creating a renderer is usually done once during the initialization of the program.</description>
    </item>
    
    <item>
      <title>SDL2 Tutorial in C [01] - Creating a Window, Renderer, and Setting an FPS Cap</title>
      <link>https://www.mkbaltz.com/posts/c-sdl-how-to-create-a-window/</link>
      <pubDate>Tue, 24 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://www.mkbaltz.com/posts/c-sdl-how-to-create-a-window/</guid>
      <description>TL;DR Skip to Putting it all together section of this post to see the whole code.
Getting SDL2 Windows - MSYS2 mingw64
pacman -S mingw-w64-x86_64-SDL2 Ubuntu
sudo apt install libsdl2-dev From SDL2 Website
You can get SDL2 development libraries for your platform on the official website&amp;rsquo;s download page https://www.libsdl.org/download-2.0.php.
Overview A typical SDL2 application does the following:
 Initialize SDL subsystems. Create a window. Create a renderer. Process events, update data, and draw objects to screen, repeatedly until the program is stopped.</description>
    </item>
    
  </channel>
</rss>
