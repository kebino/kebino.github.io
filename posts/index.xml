<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on mkbaltz</title>
    <link>https://www.mkbaltz.com/posts/</link>
    <description>Recent content in Posts on mkbaltz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 May 2022 00:00:00 +0800</lastBuildDate><atom:link href="https://www.mkbaltz.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C - How to Convert Numbers to String and String to Numbers</title>
      <link>https://www.mkbaltz.com/posts/c-convert-number-to-string/</link>
      <pubDate>Wed, 04 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://www.mkbaltz.com/posts/c-convert-number-to-string/</guid>
      <description>Type conversion from a numeric value to string and vice versa is provided by a set functions in the standard library.
Below are the functions that we will discuss in this post
   Function Description header     sprintf Print formatted output to a string stdio.h   snprintf Print length-limited formatted output to a string stdio.h   atoi String to int stdlib.h   atof String to float stdlib.</description>
    </item>
    
    <item>
      <title>Strings in C</title>
      <link>https://www.mkbaltz.com/posts/c-strings/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://www.mkbaltz.com/posts/c-strings/</guid>
      <description>In C, a string is an array of characters ending with a null terminator &amp;rsquo;\0&amp;rsquo;. If you are coming from a different programming language here&amp;rsquo;s what you need to know to start working with strings.
Declaration and Initialization Let&amp;rsquo;s start by looking at different ways to declare and initialize a string.
As stated earlier it is an array of characters ending with a null terminator. Here&amp;rsquo;s how it looks like.</description>
    </item>
    
    <item>
      <title>C - Let&#39;s Make a Foreach Function</title>
      <link>https://www.mkbaltz.com/posts/c-foreach-function/</link>
      <pubDate>Mon, 02 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://www.mkbaltz.com/posts/c-foreach-function/</guid>
      <description>In my previous post we created a map function in C. Now let&amp;rsquo;s make the forEach function.
Foreach Function The forEach function, similar to map, takes an array and a callback function as a parameter. It also iterates through all of the items of the array and process each one using the callback function.
The main difference between the two functions is that forEach can modify the values inside the given array unlike map which returns a new array with the updated values and preserves the original.</description>
    </item>
    
    <item>
      <title>C - Let&#39;s Make a Map Function</title>
      <link>https://www.mkbaltz.com/posts/c-map-function/</link>
      <pubDate>Sun, 01 May 2022 00:00:08 +0800</pubDate>
      
      <guid>https://www.mkbaltz.com/posts/c-map-function/</guid>
      <description>If you&amp;rsquo;re a web developer and is currently learning C, you might haved missed working with javascript&amp;rsquo;s array functions like map, foreach, filter and others. So today let&amp;rsquo;s make one of those functions in C.
Map Function The map function takes an array and a callback function as parameter. It iterates through all of the items of the array and process each one using the callback function then returns a new array with the updated values.</description>
    </item>
    
    <item>
      <title>How to Serve Multiple Angular App from a Single Nginx Server</title>
      <link>https://www.mkbaltz.com/posts/multiple-angular-app-nginx/</link>
      <pubDate>Sat, 30 Apr 2022 00:00:00 +0800</pubDate>
      
      <guid>https://www.mkbaltz.com/posts/multiple-angular-app-nginx/</guid>
      <description>You have 2 angular projects, let&amp;rsquo;s call them Site1 and Site2, and you want to deploy them both on your nginx server.
Base url of Site1 will be:
https://{your_website}/site1 And for Site2:
https://{your_website}/site2 Step 1: Build your angular projects # Build command for Site1 ng build --configuration=production --base-href=https://www.mkbaltz.com/site1/ --deploy-url=https://www.mkbaltz.com/site1/  # Build command for Site 2 ng build --configuration=production --base-href=https://www.mkbaltz.com/site2/ --deploy-url=https://www.mkbaltz.com/site2/ The &amp;ndash;base-href and &amp;ndash;deploy-url values will be used by angular as reference for its routing and locating of assets once deployed.</description>
    </item>
    
    <item>
      <title>C How to Read the Entire Content of a Text File</title>
      <link>https://www.mkbaltz.com/posts/c-read-entire-text/</link>
      <pubDate>Fri, 29 Apr 2022 06:29:02 +0800</pubDate>
      
      <guid>https://www.mkbaltz.com/posts/c-read-entire-text/</guid>
      <description>Most resources I found for reading files shows how to read a file line by line then display the output, but there are cases where you want to read the entire content of the file and store its contents in a variable for later use.
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; char* read_file(const char* path) {  // open the file  FILE* f = fopen(path, &amp;#34;rb&amp;#34;);   // determine the length of the file  fseek(f, 0, SEEK_END);  long length = ftell(f);  fseek(f, 0, SEEK_SET);   // allocate buffer to store the contents of the file  // size of the buffer should be the file length + 1  // because we need to add a null terminator at the end  char* buffer = malloc((sizeof(char) * length) + 1);   // read the file to our buffer  fread(buffer, sizeof(char), length, f);   // at this point file can be closed  fclose(f);   // add null terminator  buffer[length] = &amp;#39;\0&amp;#39;;   return buffer; }  int main(int argc, char* args[]) {  // read the file and store its contents to str variable  char* str = read_file(&amp;#34;path_to_file.</description>
    </item>
    
    <item>
      <title>C Encapsulation and Opaque Types</title>
      <link>https://www.mkbaltz.com/posts/c-encapsulation/</link>
      <pubDate>Thu, 28 Apr 2022 13:52:37 +0800</pubDate>
      
      <guid>https://www.mkbaltz.com/posts/c-encapsulation/</guid>
      <description>Encapsulation in most languages is usually done by having a class with a private variable with public methods to access and modify its value.
An Example Here&amp;rsquo;s an example in Java for illustrative purposes
// simple example in Java public class Person {  // constructor  public Person() {}   // private variable accessible only inside the class  private int age;   // public methods to interact with its instance  public int getAge() {  return this.</description>
    </item>
    
    <item>
      <title>How to Recover Password from a Saved Connection in DBeaver</title>
      <link>https://www.mkbaltz.com/posts/how-to-recover-dbeaver-password/</link>
      <pubDate>Wed, 27 Apr 2022 16:04:12 +0800</pubDate>
      
      <guid>https://www.mkbaltz.com/posts/how-to-recover-dbeaver-password/</guid>
      <description>Requirements  OpenSSL is installed on your system OpenSSL is registered to PATH  TLDR; cd credentials_config_json_directory # change this to the directory where credentials-config.json is located on your system openssl aes-128-cbc -d -K babb4a9f774ab853c96c2d653dfe544a -iv 00000000000000000000000000000000 -in &amp;#34;credentials-config.json&amp;#34; Export DBeaver Project DBeaver stores an encrypted credentials of your saved connections in the a file named &amp;ldquo;credentials-config.json&amp;rdquo;.
To get this file we need to:  In DBeaver, Go to File -&amp;gt; Export -&amp;gt; DBeaver -&amp;gt; Project Select an output directory Press Finish Go to output directory Rename output file and change extension to .</description>
    </item>
    
  </channel>
</rss>
